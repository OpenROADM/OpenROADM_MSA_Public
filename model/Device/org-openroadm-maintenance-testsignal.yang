module org-openroadm-maintenance-testsignal {
  yang-version 1.1;
  namespace "http://org/openroadm/maintenance-testsignal";
  prefix org-openroadm-maint-testsignal;

  import org-openroadm-common-types {
    prefix org-openroadm-common-types;
    revision-date 2024-03-29;
  }

  organization
    "Open ROADM MSA";
  contact
    "OpenROADM.org";
  description
    "YANG definitions for maintenance testsignal.

     Copyright of the Members of the Open ROADM MSA Agreement dated (c) 2016,
     All other rights reserved.

     Redistribution and use in source and binary forms, with or without modification,
     are permitted provided that the following conditions are met:

     * Redistributions of source code must retain the above copyright notice, this
       list of conditions and the following disclaimer.
     * Redistributions in binary form must reproduce the above copyright notice,
       this list of conditions and the following disclaimer in the documentation and/or
       other materials provided with the distribution.
     * Neither the Members of the Open ROADM MSA Agreement nor the names of its
       contributors may be used to endorse or promote products derived from this software
       without specific prior written permission.

     THIS SOFTWARE IS PROVIDED BY THE MEMBERS OF THE OPEN ROADM MSA  AGREEMENT ''AS IS''
     AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
     IN NO EVENT THE MEMBERS OF THE OPEN ROADM MSA  AGREEMENT BE LIABLE FOR ANY DIRECT,
     INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
     NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  LOSS OF USE, DATA,
     OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
     WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
     ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     POSSIBILITY OF SUCH DAMAGE.";

  revision 2024-03-29 {
    description
      "Version 15.0";
  }
  revision 2023-12-08 {
    description
      "Version 14.1";
  }
  revision 2023-09-29 {
    description
      "Version 14.0";
  }
  revision 2023-05-26 {
    description
      "Version 13.1";
  }
  revision 2023-03-31 {
    description
      "Version 13.0";
  }
  revision 2022-12-09 {
    description
      "Version 12.1";
  }
  revision 2022-09-30 {
    description
      "Version 12.0";
  }
  revision 2022-05-27 {
    description
      "Version 11.1";
  }
  revision 2022-03-25 {
    description
      "Version 11.0";
  }
  revision 2021-12-10 {
    description
      "Version 10.1";
  }
  revision 2021-09-24 {
    description
      "Version 10.0";
  }
  revision 2021-05-28 {
    description
      "Version 9.1";
  }
  revision 2021-03-26 {
    description
      "Version 9.0";
  }
  revision 2020-12-11 {
    description
      "Version 8.1";
  }
  revision 2020-09-25 {
    description
      "Version 8.0";
  }
  revision 2020-05-29 {
    description
      "Version 7.1.0";
  }
  revision 2020-03-27 {
    description
      "Version 7.0.0";
  }
  revision 2019-11-29 {
    description
      "Version 6.1.0";
  }
  revision 2019-09-27 {
    description
      "Version 6.0.0";
  }
  revision 2019-05-31 {
    description
      "Version 5.1.0";
  }
  revision 2019-03-29 {
    description
      "Version 5.0.0";
  }
  revision 2018-11-30 {
    description
      "Version 4.1.0";
  }
  revision 2017-12-15 {
    description
      "Version 2.2";
  }
  revision 2016-10-14 {
    description
      "Version 1.2";
  }

  grouping maint-testsignal {
    description
      "Maintenance testsignal grouping";
    container maint-testsignal {
      description
        "Maintenance testsignal container";
      typedef testsig-type {
        type enumeration {
          enum fac {
            value 0;
            description
              "test signal in the facility direction";
          }
          enum term {
            value 1;
            description
              "test signal in the terminal direction";
          }
        }
        description
          "Testsignal enum typedef";
      }

      action clear-diagnostics {
        description
          "Perform maintenance and diagnostic counter clear.";
        input {
          leaf type {
            type testsig-type;
            description
              "Maintenance and Diagnostic counter to be cleared.  If the type is not specified then it will reset the counter for the enabled type(s)";
          }
        }
        output {
          leaf status {
            type org-openroadm-common-types:rpc-status;
            mandatory true;
            description
              "RPC status";
          }
          leaf status-message {
            type string;
            description
              "status message";
          }
        }
      }
      leaf enabled {
        type boolean;
        default "false";
        description
          "testsignal enabled flag";
      }
      leaf testPattern {
        when "../enabled = 'true'";
        type enumeration {
          enum PRBS {
            value 0;
            description
              "Unframed, inverted PN-31 pattern or PRBS31 pattern per IEEE 802.3
               clause 50.3.8.2 (inverted PN-31 at line rate)";
          }
          enum PRBS31 {
            value 1;
            description
              "PRBS31 with standard mapping per G.709 clause 17.5.2 and G.709.1 Amd4 draft clause 10.6";
          }
          enum PRBS23 {
            value 2;
            description
              "SONET/SDH Framed,inverted PN-23 pattern.";
          }
          enum PRZEROS {
            value 3;
            description
              "pseudo-random with zeros data pattern per IEEE 802.3 clause 49.2.8";
          }
          enum IDLE {
            value 4;
            description
              "Scrambled IDLE test-pattern per IEEE 802.3ba";
          }
        }
        mandatory true;
        description
          "Set test signal pattern";
      }
      leaf type {
        when "../enabled = 'true'";
        type testsig-type;
        default "fac";
        description
          "Set test signal type (or direction).";
      }
      leaf inSync {
        type boolean;
        config false;
        description
          "sync status of the received test signal";
      }
      leaf seconds {
        when "../enabled = 'true' and ../inSync = 'true'";
        type uint32;
        config false;
        mandatory true;
        description
          "number of seconds the received test signal is in sync.";
      }
      leaf bitErrors {
        when "../enabled = 'true' and ../inSync = 'true'";
        type uint32 {
          range "0..4294967295";
        }
        config false;
        description
          "bit errors for test signal.";
      }
      leaf bitErrorRate {
        when "../enabled = 'true' and ../inSync = 'true'";
        type decimal64 {
          fraction-digits 17;
        }
        config false;
        description
          "bit error rate of the received test signal";
      }
    }
  }
}
